# Name of the workflow shown in the GitHub Actions UI
name: CI Pipeline

# Events that trigger the workflow
on:
  push:
    branches:
      - main  # Trigger when code is pushed to the main branch
  workflow_dispatch:  # Allow manual trigger from GitHub UI

jobs:
  build:
    name: Build  # Job name
    runs-on: ubuntu-latest  # Run the job on the latest Ubuntu runner
    outputs:
      version: ${{ steps.set_version.outputs.version }}  # Expose version output from a later step

    services:
      mysql:  # Define a MySQL service container
        image: mysql:8.0.29  # Use specific MySQL image
        env:
          MYSQL_ROOT_PASSWORD: tempdbpassword  # Root password
          MYSQL_DATABASE: pizza  # Default DB to create
        ports:
          - '3306:3306'  # Expose MySQL port
        options: >-  # Add health check options for MySQL
          --health-cmd "mysqladmin ping -ptempdbpassword"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4  # Checkout code from repository

      - name: Setup Node
        uses: actions/setup-node@v4  # Setup Node.js environment
        with:
          node-version: '22.x'  # Use Node.js v22

      - name: Install dependencies
        run: npm ci  # Clean install dependencies from package-lock.json

      #- name: Lint
        #run: npm run lint  # (Commented out) Run linter

      - name: Write config file
        run: |
          # Dynamically write app config using secrets and hardcoded DB settings
          echo "module.exports = {
            jwtSecret: '${{ secrets.JWT_SECRET }}',
            db: {
              connection: {
                host: '127.0.0.1',
                user: 'root',
                password: 'tempdbpassword',
                database: 'pizza',
                connectTimeout: 60000,
              },
              listPerPage: 10,
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: '${{ secrets.FACTORY_API_KEY }}',
            },
            metrics: {
              source: 'jwt-pizza-service',
              url: '${{ secrets.METRICS_URL }}',
              apiKey: '${{ secrets.METRICS_API_KEY }}',
            },  
            logging: {
              source: 'jwt-pizza-service',
              userId: ${{ secrets.LOGGING_USER_ID }},
              url: '${{ secrets.LOGGING_URL }}',
              apiKey: '${{ secrets.LOGGING_API_KEY }}',
            },
          };" > src/config.js  # Save to src/config.js

      #- name: Tests
        #run: npm test  # (Commented out) Run tests

      - name: set version
        id: set_version
        run: |
          # Create a version number based on date and time
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"  # Export it for use in deploy
          printf '{"version": "%s" }' "$version" > src/version.json  # Save to version.json

      #- name: Update coverage
        #run: |
          # Extract coverage percent, determine badge color, and update badge
          #coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          #color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          #curl -s -X POST "https://badge.cs329.click/badge/${{ github.repository_owner }}/jwtpizzaservicecoverage?label=Coverage&value=$coverage%25&color=$color" -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}" -o /dev/null

      - name: Create dist
        run: |
          # Create a dist folder and populate it with build files
          mkdir dist
          cp Dockerfile dist
          cp -r src/* dist
          cp *.json dist
          # Replace local credentials with secrets in config.js
          sed -i "s/root/${{ secrets.DB_USERNAME }}/g" dist/config.js
          sed -i "s/tempdbpassword/${{ secrets.DB_PASSWORD }}/g" dist/config.js
          sed -i "s/127.0.0.1/${{ secrets.DB_HOSTNAME }}/g" dist/config.js

      - name: Update distribution artifact
        uses: actions/upload-artifact@v4  # Upload the dist folder as an artifact
        with:
          name: package
          path: dist/

  deploy:
    runs-on: ubuntu-latest  # Same OS as build job
    permissions:
      id-token: write  # Allow GitHub to assume IAM role via OIDC
    needs: build  # This job depends on the build job
    env:
      version: ${{ needs.build.outputs.version }}  # Get version from build job

    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: package  # Download the uploaded dist package

      - name: Create OIDC token to AWS
        uses: aws-actions/configure-aws-credentials@v4  # Configure AWS credentials via GitHub OIDC
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2  # Login to Amazon ECR

      - name: Set up machine emulation
        uses: docker/setup-qemu-action@v3  # Allow building for other CPU architectures

      - name: Set up Docker build
        uses: docker/setup-buildx-action@v3  # Setup Docker builder for multi-platform builds

      - name: Build and push container image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 'jwt-pizza-service'
        run: |
          # Build the Docker
